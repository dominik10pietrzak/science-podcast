[{"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\index.tsx":"1","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\store.js":"3","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\App.tsx":"4","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reducers\\userReducers.ts":"5","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reducers\\podcastReducers.ts":"6","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\navbar.tsx":"7","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\footer.tsx":"8","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\homepage.tsx":"9","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\contact.tsx":"10","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\weather.tsx":"11","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\Register.tsx":"12","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\UserPanel.tsx":"13","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\Login.tsx":"14","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\actions\\userActions.ts":"15","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\message-form.tsx":"16","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\current-weather.tsx":"17","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Comments.tsx":"18","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\forecast.tsx":"19","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Loader.tsx":"20","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Message.tsx":"21","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\actions\\podcastActions.ts":"22","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\player.tsx":"23","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\SearchBar.tsx":"24","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Paginate.tsx":"25","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\PodcastList.tsx":"26","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\AdminPanel.tsx":"27","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\UserEdit.tsx":"28","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\PodcastEdit.tsx":"29","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\podcast.tsx":"30","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reducers\\commentReducers.ts":"31","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\actions\\commentActions.ts":"32","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\Homepage.tsx":"33","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\functions\\functions.ts":"34","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Confirm.tsx":"35","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Reply.tsx":"36","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Comment.tsx":"37"},{"size":654,"mtime":1615886009450,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":499162500000,"results":"40","hashOfConfig":"39"},{"size":1867,"mtime":1614638576283,"results":"41","hashOfConfig":"39"},{"size":1534,"mtime":1615757569784,"results":"42","hashOfConfig":"39"},{"size":3176,"mtime":1614195213514,"results":"43","hashOfConfig":"39"},{"size":2859,"mtime":1614986817648,"results":"44","hashOfConfig":"39"},{"size":6464,"mtime":1616017773324,"results":"45","hashOfConfig":"39"},{"size":477,"mtime":1615411451967,"results":"46","hashOfConfig":"39"},{"size":320,"mtime":1614956898355,"results":"47","hashOfConfig":"39"},{"size":3623,"mtime":1615329538421,"results":"48","hashOfConfig":"39"},{"size":4777,"mtime":1615763679550,"results":"49","hashOfConfig":"39"},{"size":3462,"mtime":1615887185664,"results":"50","hashOfConfig":"39"},{"size":7621,"mtime":1615931451833,"results":"51","hashOfConfig":"39"},{"size":2755,"mtime":1616170684544,"results":"52","hashOfConfig":"39"},{"size":6083,"mtime":1614195117009,"results":"53","hashOfConfig":"39"},{"size":3515,"mtime":1615733649526,"results":"54","hashOfConfig":"39"},{"size":1749,"mtime":1615763721658,"results":"55","hashOfConfig":"39"},{"size":9256,"mtime":1615998351181,"results":"56","hashOfConfig":"39"},{"size":3262,"mtime":1615824246835,"results":"57","hashOfConfig":"39"},{"size":396,"mtime":1614983359359,"results":"58","hashOfConfig":"39"},{"size":214,"mtime":1613172291458,"results":"59","hashOfConfig":"39"},{"size":4422,"mtime":1614896227529,"results":"60","hashOfConfig":"39"},{"size":7389,"mtime":1616171876389,"results":"61","hashOfConfig":"39"},{"size":2565,"mtime":1615899966903,"results":"62","hashOfConfig":"39"},{"size":746,"mtime":1613902854279,"results":"63","hashOfConfig":"39"},{"size":5388,"mtime":1615888157888,"results":"64","hashOfConfig":"39"},{"size":6690,"mtime":1615923198931,"results":"65","hashOfConfig":"39"},{"size":2922,"mtime":1615043776872,"results":"66","hashOfConfig":"39"},{"size":5696,"mtime":1615888123242,"results":"67","hashOfConfig":"39"},{"size":395,"mtime":1614550492523,"results":"68","hashOfConfig":"39"},{"size":1694,"mtime":1614988993997,"results":"69","hashOfConfig":"39"},{"size":2456,"mtime":1614989146264,"results":"70","hashOfConfig":"39"},{"size":4007,"mtime":1615930527015,"results":"71","hashOfConfig":"39"},{"size":394,"mtime":1615763536833,"results":"72","hashOfConfig":"39"},{"size":956,"mtime":1615807446748,"results":"73","hashOfConfig":"39"},{"size":5510,"mtime":1615984089962,"results":"74","hashOfConfig":"39"},{"size":6890,"mtime":1616017370996,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"13jg2n6",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\index.tsx",[],["166","167"],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reportWebVitals.js",[],["168","169"],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\store.js",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\App.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reducers\\userReducers.ts",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reducers\\podcastReducers.ts",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\navbar.tsx",["170"],"import React, { useEffect } from 'react';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../actions/userActions';\r\nimport { useHistory } from 'react-router';\r\nimport '../styles/navbar.scss';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar: React.FC = () => {\r\n  const { userInfo } = useSelector((state: RootStateOrAny) => state.userLogin);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const menuButtons = document.querySelectorAll('.navigation-button');\r\n    const sideButtons = document.querySelectorAll('.side-button');\r\n    const sliders = document.querySelectorAll('.navigation-button .slider');\r\n\r\n    menuButtons.forEach((button, idx) => {\r\n      button.addEventListener('mouseenter', () => {\r\n        (button as HTMLElement).style.justifyContent = 'flex-start';\r\n        (sliders[idx] as HTMLElement).style.width = '100%';\r\n      });\r\n\r\n      button.addEventListener('mouseleave', () => {\r\n        (button as HTMLElement).style.justifyContent = 'flex-end';\r\n        (sliders[idx] as HTMLElement).style.width = '0';\r\n      });\r\n    });\r\n\r\n    sideButtons.forEach((button, idx) => {\r\n      (button as HTMLElement).style.transition = `all 0.3s ease ${idx * 0.05}s`;\r\n    });\r\n  }, [userInfo, history]);\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  const addOffClick = (e: Event, fun: any) => {\r\n    const offClick = (evt: Event) => {\r\n      if (e !== evt) {\r\n        fun();\r\n        document.removeEventListener('click', offClick);\r\n      }\r\n    };\r\n    document.addEventListener('click', offClick);\r\n  };\r\n\r\n  const handleButtonClick = (e: any) => {\r\n    e.stopPropagation();\r\n    const hamburger = document.querySelector('.menu-button') as HTMLElement;\r\n    const menu = document.querySelector('.navbar') as HTMLElement;\r\n    const app = document.querySelector('body') as HTMLElement;\r\n\r\n    const toggleMenu = () => {\r\n      hamburger.classList.toggle('button-active');\r\n      menu.classList.toggle('navbar-active');\r\n      // app.classList.toggle('app-swipe');\r\n    };\r\n\r\n    toggleMenu();\r\n    if (!menu.classList.contains('navbar-active')) {\r\n      addOffClick(e, toggleMenu);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='navbar navbar-active'>\r\n      <Link to='/' className='name'>\r\n        <h3>NaukowyPodcast</h3>\r\n      </Link>\r\n      <div className='menu'>\r\n        <div className='main-menu'>\r\n          <Link to='/' className='navigation-button'>\r\n            Home\r\n            <span className='slider' />\r\n          </Link>\r\n          <Link to='/podcast' className='navigation-button'>\r\n            Podcast\r\n            <span className='slider' />\r\n          </Link>\r\n          <Link to='/weather' className='navigation-button'>\r\n            Pogoda\r\n            <span className='slider' />\r\n          </Link>\r\n          <Link to='/contact' className='navigation-button'>\r\n            Kontakt\r\n            <span className='slider' />\r\n          </Link>\r\n        </div>\r\n\r\n        <div className='hidden-menu'>\r\n          <Link to='/' className='navigation-button side-button'>\r\n            Home\r\n            <span className='slider' />\r\n          </Link>\r\n          <Link to='/podcast' className='navigation-button side-button'>\r\n            Podcast\r\n            <span className='slider' />\r\n          </Link>\r\n          <Link to='/weather' className='navigation-button side-button'>\r\n            Pogoda\r\n            <span className='slider' />\r\n          </Link>\r\n          <Link to='/contact' className='navigation-button side-button'>\r\n            Kontakt\r\n            <span className='slider' />\r\n          </Link>\r\n          {userInfo && userInfo.isAdmin ? (\r\n            <Link to='/adminpanel' className='navigation-button side-button'>\r\n              Admin\r\n              <span className='slider' />\r\n            </Link>\r\n          ) : (\r\n            ''\r\n          )}\r\n          {userInfo ? (\r\n            <>\r\n              <Link to='/user' className='navigation-button side-button'>\r\n                {userInfo.username}\r\n                <i className='far fa-user'></i>\r\n                <span className='slider' />\r\n              </Link>\r\n              <span\r\n                className='navigation-button side-button'\r\n                onClick={logoutHandler}>\r\n                Wyloguj\r\n                <span className='slider' />\r\n              </span>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Link to='/login' className='navigation-button side-button'>\r\n                Logowanie\r\n                <span className='slider' />\r\n              </Link>\r\n              <Link to='/register' className='navigation-button side-button'>\r\n                Rejestracja\r\n                <span className='slider' />\r\n              </Link>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        <div className='side-menu'>\r\n          <div className='side-menu-option-buttons'>\r\n            {userInfo && userInfo.isAdmin ? (\r\n              <Link to='/adminpanel' className='navigation-button'>\r\n                Admin\r\n                <span className='slider' />\r\n              </Link>\r\n            ) : (\r\n              ''\r\n            )}\r\n            {userInfo ? (\r\n              <>\r\n                <Link to='/user' className='navigation-button'>\r\n                  {userInfo.username}\r\n                  <i className='far fa-user'></i>\r\n                  <span className='slider' />\r\n                </Link>\r\n                <span className='navigation-button' onClick={logoutHandler}>\r\n                  Wyloguj\r\n                  <span className='slider' />\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Link to='/login' className='navigation-button'>\r\n                  Logowanie\r\n                  <span className='slider' />\r\n                </Link>\r\n                <Link to='/register' className='navigation-button'>\r\n                  Rejestracja\r\n                  <span className='slider' />\r\n                </Link>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div\r\n            className='menu-button'\r\n            onClick={(e) => {\r\n              handleButtonClick(e);\r\n            }}>\r\n            <div className='line' />\r\n            <div className='line' />\r\n            <div className='line' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\footer.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\homepage.tsx",[],["171","172"],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\contact.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\weather.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\Register.tsx",["173"],"import React, { useState, useEffect } from 'react';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport { register } from '../actions/userActions';\r\n\r\nimport '../styles/login-register.scss';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst Register: React.FC<{ location: any; history: any }> = ({ location }) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/';\r\n\r\n  const userRegister = useSelector(\r\n    (state: RootStateOrAny) => state.userRegister\r\n  );\r\n  const { error, loading, userInfo } = userRegister;\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect);\r\n    }\r\n\r\n    onLoadAnimations();\r\n\r\n    return () => {\r\n      onLeaveAnimations();\r\n    };\r\n  }, [loading, userInfo, redirect]);\r\n\r\n  const onLoadAnimations = () => {\r\n    const navbar = document.querySelector('.navbar') as HTMLElement;\r\n    navbar.style.background = 'black';\r\n\r\n    const form = document.querySelector('.login-register-form') as HTMLElement;\r\n    setTimeout(() => {\r\n      form.style.opacity = '1';\r\n    }, 15);\r\n  };\r\n\r\n  const onLeaveAnimations = () => {\r\n    const navbar = document.querySelector('.navbar') as HTMLElement;\r\n    navbar.style.background = 'transparent';\r\n  };\r\n\r\n  const handleRegister = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      console.log('Passwords do not match');\r\n    } else {\r\n      dispatch(register(name, email, password));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className='login-register-container'>\r\n        <form className='login-register-form' onSubmit={handleRegister}>\r\n          <h2 className='heading'>Zarejestruj się</h2>\r\n          <p className='sign-in-info'>\r\n            Tworząc konto uzyskasz możliwość dodawania komentarzy.\r\n          </p>\r\n          <input\r\n            type='text'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            placeholder='Nazwa użytkownika'\r\n            required\r\n          />\r\n          <input\r\n            type='email'\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder='Email'\r\n            required\r\n          />\r\n          <input\r\n            type='password'\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder='Hasło'\r\n            required\r\n          />\r\n          <input\r\n            type='password'\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n            placeholder='Powtórz hasło'\r\n            required\r\n          />\r\n          <button type='submit'>Utwórz konto</button>\r\n          {error && <Message>{error}</Message>}\r\n          {loading && <Loader />}\r\n          <p className='sign-in-info'>\r\n            Masz już konto?{' '}\r\n            <Link to='/login' className='link-button'>\r\n              <strong>Zaloguj się</strong>\r\n            </Link>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\UserPanel.tsx",["174","175","176","177","178"],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/user-panel.scss';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { getPodcasts } from '../actions/podcastActions';\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions';\r\nimport { Link } from 'react-router-dom';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport axios from 'axios';\r\nimport Footer from '../components/footer';\r\n\r\nconst UserPanel: React.FC<{ history: any }> = ({ history }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [profilePic, setProfilePic] = useState('');\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetails = useSelector((state: RootStateOrAny) => state.userDetails);\r\n  const { error, loading: loadingUser, user } = userDetails;\r\n\r\n  const userUpdateProfile = useSelector(\r\n    (state: RootStateOrAny) => state.userUpdateProfile\r\n  );\r\n  const { success } = userUpdateProfile;\r\n\r\n  const userLogin = useSelector((state: RootStateOrAny) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const podcastList = useSelector((state: RootStateOrAny) => state.podcastList);\r\n  const { podcasts, loading: loadingPodcasts } = podcastList;\r\n\r\n  useEffect(() => {\r\n    (document.querySelector('.navbar') as HTMLElement).classList.add('static');\r\n    // (document.querySelector('.footer') as HTMLElement).classList.add('hidden');\r\n\r\n    if (!userInfo || !userInfo.id) {\r\n      history.push('/login');\r\n    } else {\r\n      if (!user || !user.name || success || userInfo.id !== user.id) {\r\n        dispatch({ type: 'USER_UPDATE_PROFILE_RESET' });\r\n        dispatch(getUserDetails('profile'));\r\n      } else {\r\n        setUsername(user.username);\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n        setProfilePic(user.userProfile.profile_pic);\r\n      }\r\n    }\r\n    dispatch(getPodcasts());\r\n    return () => {\r\n      (document.querySelector('.navbar') as HTMLElement).classList.remove(\r\n        'static'\r\n      );\r\n    };\r\n  }, [dispatch, history, success, userInfo, user]);\r\n\r\n  const submitHandler = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setMessage('Passwords do not match');\r\n    } else {\r\n      dispatch(\r\n        updateUserProfile({\r\n          id: user.id,\r\n          username: username,\r\n          name: name,\r\n          email: email,\r\n          password: password,\r\n        })\r\n      );\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  const fadeInAnimations = () => {\r\n    const panel = document.querySelector('.user-panel') as HTMLElement;\r\n\r\n    setTimeout(() => {\r\n      panel.classList.remove('hidden');\r\n    }, 150);\r\n  };\r\n\r\n  const uploadFileHandler = () => async (e: React.FormEvent | any) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n\r\n    formData.append('file', file);\r\n    formData.append('profile_id', user.userProfile.id);\r\n\r\n    setUploading(true);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        '/api/users/profile/upload/',\r\n        formData,\r\n        config\r\n      );\r\n\r\n      await dispatch(getUserDetails('profile'));\r\n      setProfilePic(data);\r\n      setUploading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='user-panel hidden'>\r\n      {userInfo && podcasts ? (\r\n        <>\r\n          <div className='liked-podcasts' onLoad={fadeInAnimations}>\r\n            <h3 className='heading'>Polubienia:</h3>\r\n            {userInfo &&\r\n              podcasts\r\n                .filter((podcast: any) =>\r\n                  podcast.likes.find((like: any) => like.user === userInfo.id)\r\n                )\r\n                .sort((a: any, b: any) => {\r\n                  const idxA = a.likes.findIndex(\r\n                    (like: any) => like.user === userInfo.id\r\n                  );\r\n                  const idxB = b.likes.findIndex(\r\n                    (like: any) => like.user === userInfo.id\r\n                  );\r\n\r\n                  return (\r\n                    Date.parse(b.likes[idxB].created) -\r\n                    Date.parse(a.likes[idxA].created)\r\n                  );\r\n                })\r\n                .map((podcast: any, idx: number) => (\r\n                  <Link\r\n                    className='liked-podcast-link'\r\n                    key={podcast.title}\r\n                    to={`podcast/${podcast.id}`}>\r\n                    <span>{idx + 1}</span>\r\n                    <img src={podcast.cover} alt='' />\r\n                    <h3>{podcast.title}</h3>\r\n                  </Link>\r\n                ))}\r\n          </div>\r\n          <div className='user-data'>\r\n            <div className='photo-settings'>\r\n              <div className='picture-box'>\r\n                {user && (\r\n                  <img\r\n                    className='profile-pic'\r\n                    src={user.userProfile && user.userProfile.profile_pic}\r\n                    alt=''\r\n                  />\r\n                )}\r\n                {uploading && (\r\n                  <div className='loader-box'>\r\n                    <Loader />\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className='basic-data'>\r\n                <h1 className='username'>{user && user.username}</h1>\r\n                <div className='picture-form'>\r\n                  <button>Zmień zdjęcie</button>\r\n                  <input\r\n                    type='file'\r\n                    placeholder='Description'\r\n                    onChange={uploadFileHandler()}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <form className='data-form' onSubmit={submitHandler}>\r\n              <h3 className='heading'>Edytuj informacje</h3>\r\n              <label>Nazwa użytkownika</label>\r\n              <input\r\n                type='text'\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n              <label>Imię</label>\r\n              <input\r\n                type='text'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <label>Email</label>\r\n              <input\r\n                type='text'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <h3 className='heading'>Zmień hasło</h3>\r\n              <label>Hasło</label>\r\n              <input\r\n                type='password'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <label>Potwierdź hasło</label>\r\n              <input\r\n                type='password'\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n              />\r\n              <button type='submit'>Aktualizuj</button>\r\n            </form>\r\n            {/* <Footer /> */}\r\n          </div>\r\n        </>\r\n      ) : loadingPodcasts || loadingUser ? (\r\n        <Loader />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPanel;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\Login.tsx",["179","180"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport '../styles/login-register.scss';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport { login } from '../actions/userActions';\r\n\r\nconst Login: React.FC<{ location: any; history: any }> = ({\r\n  location,\r\n  history,\r\n}) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/';\r\n\r\n  const { error, loading, userInfo } = useSelector(\r\n    (state: RootStateOrAny) => state.userLogin\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect);\r\n    }\r\n\r\n    // (document.querySelector(\r\n    //   '.login-register-container'\r\n    // ) as HTMLElement).style.height = `${window.innerHeight}px`;\r\n    onLoadAnimations();\r\n\r\n    return () => {\r\n      onLeaveAnimations();\r\n    };\r\n  }, [userInfo, redirect, location]);\r\n\r\n  const handleLogin = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    dispatch(login(username, password));\r\n  };\r\n\r\n  const onLoadAnimations = () => {\r\n    const navbar = document.querySelector('.navbar') as HTMLElement;\r\n    navbar.style.background = 'black';\r\n\r\n    const form = document.querySelector('.login-register-form') as HTMLElement;\r\n    setTimeout(() => {\r\n      form.style.opacity = '1';\r\n    }, 100);\r\n  };\r\n\r\n  const onLeaveAnimations = () => {\r\n    const navbar = document.querySelector('.navbar') as HTMLElement;\r\n    navbar.style.background = 'transparent';\r\n  };\r\n\r\n  return (\r\n    <div className='login-register-container'>\r\n      <form className='login-register-form' onSubmit={handleLogin}>\r\n        <h2 className='heading'>Zaloguj się</h2>\r\n        <p className='sign-in-info'>Wypełnij formularz, aby się zalogować</p>\r\n        <input\r\n          type='text'\r\n          placeholder='Nazwa użytkownika'\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <input\r\n          type='password'\r\n          placeholder='Hasło'\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button type='submit'>Zaloguj się</button>\r\n        {error && <Message>{error}</Message>}\r\n        {loading && <Loader />}\r\n        <p className='sign-in-info'>\r\n          Nie masz konta?{' '}\r\n          <Link to='/register' className='link-button'>\r\n            <strong>Zarejestruj się</strong>\r\n          </Link>\r\n        </p>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\actions\\userActions.ts",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\message-form.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\current-weather.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Comments.tsx",["181","182"],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/comments.scss';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport pl from 'javascript-time-ago/locale/pl';\r\nimport Loader from '../components/Loader';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { getComments, createComment } from '../actions/commentActions';\r\nimport axios from 'axios';\r\nimport Confirm from './Confirm';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Comment from './Comment';\r\n\r\nconst Comments: React.FC<{ podcastId: number }> = ({ podcastId }) => {\r\n  const [commentText, setCommentText] = useState('');\r\n  const [commentToDelete, setCommentToDelete] = useState(0);\r\n  const [confirm, setConfirm] = useState(false);\r\n\r\n  TimeAgo.addLocale(pl);\r\n  const timeAgo = new TimeAgo('pl-PL');\r\n  timeAgo.format(new Date());\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const { userInfo } = useSelector((state: RootStateOrAny) => state.userLogin);\r\n\r\n  const { comments, loading } = useSelector(\r\n    (state: RootStateOrAny) => state.commentsList\r\n  );\r\n\r\n  const { success: commentDeleteSuccess } = useSelector(\r\n    (state: RootStateOrAny) => state.commentDelete\r\n  );\r\n\r\n  const { success: commentCreateSuccess } = useSelector(\r\n    (state: RootStateOrAny) => state.commentCreate\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (commentCreateSuccess || commentDeleteSuccess) {\r\n      setCommentText('');\r\n    }\r\n    dispatch(getComments(podcastId));\r\n  }, [dispatch, podcastId, commentCreateSuccess, commentDeleteSuccess]);\r\n\r\n  const createCommentHandler = async (\r\n    e: React.FormEvent,\r\n    type: string,\r\n    commentId: number = 0,\r\n    replyId: number = 0,\r\n    author: string = ''\r\n  ) => {\r\n    e.preventDefault();\r\n    console.log(commentId);\r\n\r\n    if (!userInfo) {\r\n      const comment = document.querySelector(\r\n        `#comment-${commentId}`\r\n      ) as HTMLElement;\r\n      console.log(comment);\r\n\r\n      return;\r\n    }\r\n\r\n    let targetId: string;\r\n    let loaderId: string;\r\n    if (replyId) {\r\n      targetId = `textBox-${replyId}`;\r\n      loaderId = `#comment-${replyId} .loader`;\r\n    } else if (commentId) {\r\n      targetId = `textBox-${commentId}`;\r\n      loaderId = `#comment-${commentId} .loader`;\r\n    } else {\r\n      targetId = 'textBox';\r\n      loaderId = `.comments .loader`;\r\n    }\r\n\r\n    const input = document.getElementById(targetId) as HTMLInputElement;\r\n    let loader = document.querySelector(loaderId) as HTMLElement;\r\n\r\n    loader.classList.add('loader-visible');\r\n\r\n    await dispatch(\r\n      createComment(podcastId, type, input.value, commentId, replyId, author)\r\n    );\r\n    await dispatch(getComments(podcastId, false));\r\n    loader.classList.remove('loader-visible');\r\n\r\n    input.value = '';\r\n  };\r\n\r\n  const commentDeleteHandler = async (commentId: number) => {\r\n    setCommentToDelete(commentId);\r\n    const confirm = document.querySelector('.confirm') as HTMLElement;\r\n    confirm.style.display = 'flex';\r\n  };\r\n\r\n  const hideForm = (commentId: number) => {\r\n    setCommentText('');\r\n\r\n    const commentForm = document.querySelector(\r\n      `#comment-${commentId} .comment-form`\r\n    ) as HTMLElement;\r\n\r\n    commentForm.style.display = 'none';\r\n  };\r\n\r\n  const showCommentForm = (commentId: number) => {\r\n    const commentForm = document.querySelector(\r\n      `#comment-${commentId} .comment-form`\r\n    ) as HTMLElement;\r\n\r\n    commentForm.style.display = 'flex';\r\n  };\r\n\r\n  const likeUnlike = async (comment: any, commentId: number) => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n      return;\r\n    }\r\n\r\n    const likeButton = comment as HTMLElement;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-type': 'application/json',\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n      const likes = document.getElementById(`likes-${commentId}`) as any;\r\n      const isLiked = likeButton.classList.contains('liked');\r\n\r\n      likeButton.classList.toggle('liked');\r\n      console.log(isLiked);\r\n\r\n      if (isLiked) {\r\n        await axios.delete(\r\n          `/api/podcast/comments/${commentId}/unlike/`,\r\n          config\r\n        );\r\n        likes.innerText = Number(likes.innerText) - 1;\r\n      } else {\r\n        await axios.post(\r\n          `/api/podcast/comments/${commentId}/like/`,\r\n          {},\r\n          config\r\n        );\r\n        likes.innerText = Number(likes.innerText) + 1;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const buttonsToggle = (commentId: number) => {\r\n    const editButtons = document.querySelector(\r\n      `#comment-${commentId} .comment-user-functions .edit-buttons`\r\n    ) as HTMLElement;\r\n    const onwerButtons = document.querySelector(\r\n      `#comment-${commentId} .comment-user-functions .owner-buttons`\r\n    ) as HTMLElement;\r\n    editButtons.classList.toggle('buttons-disabled');\r\n    onwerButtons.classList.toggle('buttons-disabled');\r\n  };\r\n\r\n  const startStopEditingComment = (commentId: number) => {\r\n    buttonsToggle(commentId);\r\n    const comment = document.getElementById(\r\n      `comment-input-${commentId}`\r\n    ) as HTMLInputElement;\r\n    if (comment.contentEditable === 'true') {\r\n      comment.contentEditable = 'false';\r\n    } else {\r\n      dispatch(getComments(podcastId, false));\r\n      comment.contentEditable = 'true';\r\n    }\r\n    comment.focus();\r\n  };\r\n\r\n  const editCommentText = (\r\n    content: any,\r\n    commentId: number,\r\n    replyId?: number\r\n  ) => {\r\n    const commentsUpdated = comments;\r\n    const comment = commentsUpdated.find(\r\n      (comment: any) => comment.id === commentId\r\n    );\r\n    if (replyId) {\r\n      comment.replies.find((reply: any) => reply.id === replyId).text =\r\n        content.value;\r\n    } else {\r\n      comment.text = content.value;\r\n    }\r\n    dispatch({\r\n      type: 'PODCAST_COMMENTS_LIST_SUCCESS',\r\n      payload: commentsUpdated,\r\n    });\r\n  };\r\n\r\n  const submitEditComment = async (commentId: number) => {\r\n    const comment = document.getElementById(\r\n      `comment-input-${commentId}`\r\n    ) as HTMLElement;\r\n    const commentText = document.querySelector(\r\n      `#comment-input-${commentId} .comment-text`\r\n    ) as HTMLElement;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-type': 'application/json',\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n\r\n      await axios.put(\r\n        `/api/podcast/comments/${commentId}/update/`,\r\n        { text: commentText.innerText },\r\n        config\r\n      );\r\n      buttonsToggle(commentId);\r\n      comment.contentEditable = 'false';\r\n      await dispatch(getComments(podcastId, false));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const activatePastePermission = () => {\r\n    const comments = document.querySelectorAll('.comment-content-text');\r\n    comments.forEach((comment) => {\r\n      (comment as HTMLElement).addEventListener('paste', function (e: any) {\r\n        e.preventDefault();\r\n        var text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n        document.execCommand('insertHTML', false, text);\r\n      });\r\n    });\r\n  };\r\n\r\n  return comments ? (\r\n    <div className='comments'>\r\n      {activatePastePermission()}\r\n      <Confirm commentToDelete={commentToDelete} />\r\n      {comments && comments.length === 0 ? (\r\n        <h3 className='section-title'>Nie ma jeszcze żadnych komentarzy</h3>\r\n      ) : (\r\n        <h3 className='section-title'>Komentarze</h3>\r\n      )}\r\n      <form\r\n        className='comment-form'\r\n        onSubmit={(e) => createCommentHandler(e, 'podcast')}>\r\n        <div className='form-group'>\r\n          <input\r\n            id='textBox'\r\n            name='comment'\r\n            value={commentText}\r\n            autoComplete='off'\r\n            onChange={(e) => setCommentText(e.target.value)}\r\n            onClick={() => (!userInfo ? history.push('/login') : '')}\r\n            placeholder='Napisz komentarz...'\r\n            required\r\n          />\r\n          <div className='line'></div>\r\n        </div>\r\n        <div className={`comment-buttons comment-active`}>\r\n          <button\r\n            className='cancel-button'\r\n            type='reset'\r\n            onClick={() => setCommentText('')}>\r\n            Anuluj\r\n          </button>\r\n          <button className='submit-button' type='submit'>\r\n            Skomentuj\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <Loader />\r\n\r\n      {/* Komentarze */}\r\n\r\n      <div className='comments-list'>\r\n        {comments.map((comment: any) => (\r\n          <Comment\r\n            key={comment.id}\r\n            comment={comment}\r\n            userInfo={userInfo}\r\n            timeAgo={timeAgo}\r\n            submitEditComment={submitEditComment}\r\n            startStopEditingComment={startStopEditingComment}\r\n            commentDeleteHandler={commentDeleteHandler}\r\n            likeUnlike={likeUnlike}\r\n            editCommentText={editCommentText}\r\n            showCommentForm={showCommentForm}\r\n            createCommentHandler={createCommentHandler}\r\n            hideForm={hideForm}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  ) : loading ? (\r\n    <Loader />\r\n  ) : null;\r\n};\r\n\r\nexport default Comments;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\forecast.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Loader.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Message.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\actions\\podcastActions.ts",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\player.tsx",["183","184","185"],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/player.scss';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { getPodcastDetails } from '../actions/podcastActions';\r\nimport Loader from '../components/Loader';\r\nimport axios from 'axios';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst Player: React.FC<{ podcastId: number }> = ({ podcastId }) => {\r\n  const [likesCount, setLikesCount] = useState(0);\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  const [likes, setLikes] = useState([] as any);\r\n  const [commentsNumber, setCommentsNumber] = useState(0);\r\n  const [podcastPreview, setPodcastPreview] = useState({}) as any;\r\n  const [mobileLayout, setMobileLayout] = useState(window.innerWidth < 420);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const { podcast, loading } = useSelector(\r\n    (state: RootStateOrAny) => state.podcastDetails\r\n  );\r\n\r\n  const { userInfo } = useSelector((state: RootStateOrAny) => state.userLogin);\r\n\r\n  const getPodcastPreview = async () => {\r\n    try {\r\n      const { data } = await axios.get(`/api/podcast/${podcastId}/preview/`);\r\n\r\n      setPodcastPreview(data);\r\n      console.log(podcastPreview);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkIfMobile = () => {\r\n    const player = document.querySelector('.player') as HTMLElement;\r\n    if (player && window.innerWidth < 420) {\r\n      setMobileLayout(true);\r\n      player.style.background = `rgb${podcast.dominant_color}`;\r\n    } else {\r\n      setMobileLayout(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    window.addEventListener('resize', checkIfMobile);\r\n\r\n    if (!podcast.title || podcast.id !== Number(podcastId)) {\r\n      dispatch(getPodcastDetails(podcastId));\r\n      getPodcastPreview();\r\n    } else {\r\n      countComments();\r\n      fadeInPlayer();\r\n      setLikesCount(podcast.likes.length);\r\n      setLikes(podcast.likes);\r\n      if (window.innerWidth < 420) {\r\n        (document.querySelector(\r\n          '.player'\r\n        ) as HTMLElement).style.background = `rgb${podcast.dominant_color}`;\r\n      }\r\n      if (\r\n        userInfo &&\r\n        podcast.likes.find((like: any) => like.user === userInfo.id)\r\n      ) {\r\n        setIsLiked(true);\r\n      }\r\n    }\r\n  }, [dispatch, podcast, userInfo, podcastId, podcastPreview]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch({ type: 'PODCAST_DETAILS_RESET' });\r\n    };\r\n  }, []);\r\n\r\n  const fadeInPlayer = () => {\r\n    const player = document.querySelector('.player') as HTMLElement;\r\n\r\n    setTimeout(() => {\r\n      player.classList.remove('fade-in-animation');\r\n    }, 25);\r\n  };\r\n\r\n  const loadImage = (image: any) => {\r\n    setTimeout(() => {\r\n      image.style.opacity = '1';\r\n    }, 100);\r\n  };\r\n\r\n  const likeUnlike = async () => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n      return;\r\n    }\r\n\r\n    const likeButton = document.querySelector('.like-button') as HTMLElement;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-type': 'application/json',\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n\r\n      likeButton.classList.toggle('liked');\r\n      setIsLiked(!isLiked);\r\n\r\n      if (isLiked) {\r\n        setLikesCount(likesCount - 1);\r\n        await axios.delete(`/api/podcast/${podcastId}/unlike/`, config);\r\n        likes.splice(likes.indexOf(userInfo.id), 1);\r\n      } else {\r\n        setLikesCount(likesCount + 1);\r\n        await axios.post(`/api/podcast/${podcastId}/like/`, {}, config);\r\n        likes.push(userInfo.id);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const goToComments = () => {\r\n    const comments = document.querySelector('.comments') as HTMLElement;\r\n    window.scrollTo({ top: comments.offsetTop, behavior: 'smooth' });\r\n  };\r\n\r\n  const countComments = () => {\r\n    let number = 0;\r\n    podcast.comments.forEach((comment: any) => {\r\n      number += 1;\r\n      if (comment.replies) {\r\n        number += comment.replies.length;\r\n      }\r\n    });\r\n    setCommentsNumber(number);\r\n  };\r\n\r\n  const handleGoNext = () => {\r\n    history.push(`/podcast/${podcastPreview.id}`);\r\n    history.go(0);\r\n  };\r\n\r\n  return (\r\n    <div className='player fade-in-animation'>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <div className='content'>\r\n            {podcast.background && !mobileLayout ? (\r\n              <img\r\n                src={podcast.background}\r\n                alt='cover'\r\n                className='background'\r\n                onLoad={(e) => loadImage(e.target)}\r\n              />\r\n            ) : (\r\n              <img\r\n                src={podcast.cover}\r\n                alt='cover'\r\n                className='cover'\r\n                onLoad={(e) => loadImage(e.target)}\r\n              />\r\n            )}\r\n            <div className='gradient'></div>\r\n            <div className='wrapper'>\r\n              <div className='flex-container'>\r\n                <div className='podcast-data'>\r\n                  <span className='category'>{podcast.category}</span>\r\n                  <h1 className='title'>{podcast.title}</h1>\r\n                  <div className='activities'>\r\n                    <span className='activity'>\r\n                      <i\r\n                        className={`fas fa-heart like-button ${\r\n                          isLiked ? 'liked' : ''\r\n                        }`}\r\n                        onClick={likeUnlike}></i>\r\n                      {likesCount}\r\n                    </span>\r\n                    <span className='activity'>\r\n                      <i\r\n                        className='fas fa-comment comment-button'\r\n                        onClick={goToComments}></i>\r\n                      {/* {podcast.comments && countComments()} */}\r\n                      {commentsNumber}\r\n                    </span>\r\n                  </div>\r\n                  <p className='description'>{podcast.description}</p>\r\n                  {podcast.file && (\r\n                    <audio\r\n                      controls\r\n                      preload='auto'\r\n                      id='podcast-audio-file'\r\n                      autoPlay>\r\n                      <source src={podcast.file} type='audio/mpeg' />\r\n                    </audio>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {podcastPreview.title && (\r\n            <div className='next-podcast-preview'>\r\n              <div className='wrapper'>\r\n                <span className='heading-preview'>Posłuchaj także:</span>\r\n                <h3>{podcastPreview.title}</h3>\r\n                <span className='preview-link' onClick={handleGoNext}>\r\n                  Przejdź\r\n                </span>\r\n              </div>\r\n              <div className='wrapper'>\r\n                <img\r\n                  src={podcastPreview.cover}\r\n                  alt='preview-cover'\r\n                  onLoad={(e) => loadImage(e.target)}\r\n                />\r\n                <span className='preview-likes'>\r\n                  <i className='far fa-heart'></i>\r\n                  {podcastPreview.likes.length}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\SearchBar.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Paginate.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\PodcastList.tsx",["186","187"],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/podcast-list.scss';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { getPodcasts } from '../actions/podcastActions';\r\nimport Loader from '../components/Loader';\r\nimport SearchBar from '../components/SearchBar';\r\nimport Paginate from '../components/Paginate';\r\n\r\nconst PodcastList: React.FC<{ history: any }> = ({ history }) => {\r\n  const playPodcast = (idx: number) => {\r\n    history.push(`/podcast/${podcasts[idx].id}`);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const { podcasts, loading, pages, page } = useSelector(\r\n    (state: RootStateOrAny) => state.podcastList\r\n  );\r\n\r\n  let keyword = history.location.search;\r\n  let keywordValue = keyword;\r\n  if (keyword) {\r\n    keywordValue = keywordValue.split('=')[1].split('&')[0];\r\n    keywordValue = keywordValue.replace(/%20/g, ' ');\r\n  }\r\n\r\n  useEffect(() => {\r\n    (document.querySelector('.navbar') as HTMLElement).classList.add('static');\r\n    dispatch(getPodcasts(keyword));\r\n\r\n    return () =>\r\n      (document.querySelector('.navbar') as HTMLElement).classList.remove(\r\n        'static'\r\n      );\r\n  }, [dispatch, keyword]);\r\n\r\n  const fadeInList = () => {\r\n    const container = document.querySelector('.podcast-list') as HTMLElement;\r\n\r\n    setTimeout(() => {\r\n      container.classList.remove('fade-in-animation');\r\n    }, 15);\r\n  };\r\n\r\n  const loadImage = (image: any) => {\r\n    setTimeout(() => {\r\n      (image as HTMLElement).style.opacity = '1';\r\n    }, 25);\r\n  };\r\n\r\n  const chooseCategory = (e: Event) => {\r\n    const activeButton = e.target as HTMLElement;\r\n\r\n    if (activeButton.innerText === 'Wszystkie') {\r\n      history.push(`/podcast/`);\r\n    } else {\r\n      history.push(`/podcast/?keyword=${activeButton.innerText}&page=1`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='podcast-list fade-in-animation'>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <div className='settings'>\r\n            <SearchBar />\r\n            <h3 className='heading'>Kategorie</h3>\r\n            <div className='categories'>\r\n              <span\r\n                className={`category-button`}\r\n                onClick={(e: any) => chooseCategory(e)}>\r\n                Wszystkie\r\n              </span>\r\n              <span\r\n                className={`category-button`}\r\n                onClick={(e: any) => chooseCategory(e)}>\r\n                Kosmos\r\n              </span>\r\n              <span\r\n                className={`category-button`}\r\n                onClick={(e: any) => chooseCategory(e)}>\r\n                Technologia\r\n              </span>\r\n              <span\r\n                className={`category-button`}\r\n                onClick={(e: any) => chooseCategory(e)}>\r\n                Klimat\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='main' onLoad={fadeInList}>\r\n            {podcasts[0] && !keyword ? (\r\n              <div className='newest-podcast'>\r\n                <img\r\n                  className='main-cover'\r\n                  src={podcasts[0].cover}\r\n                  alt='cover'\r\n                  onLoad={(e) => loadImage(e.target)}\r\n                />\r\n                <div className='newest-podcast-data'>\r\n                  <h1>{podcasts[0].title}</h1>\r\n                  <p>{podcasts[0].description}</p>\r\n                  <Link\r\n                    className='newest-button'\r\n                    to={`/podcast/${podcasts[0].id}`}>\r\n                    Słuchaj\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n            <div className='newest-list'>\r\n              {keyword ? (\r\n                <h3 className='heading'>{keywordValue}:</h3>\r\n              ) : (\r\n                <h3 className='heading'>Najnowsze podcasty:</h3>\r\n              )}\r\n\r\n              <div className='content'>\r\n                {podcasts &&\r\n                  podcasts.map(\r\n                    (podcast: any, idx: number) =>\r\n                      (!keyword ? podcasts[0] !== podcast : podcasts) && (\r\n                        <div\r\n                          className='podcast-button'\r\n                          onClick={() => playPodcast(idx)}\r\n                          key={idx}>\r\n                          <div className='podcast-cover'>\r\n                            {podcast.cover ? (\r\n                              <img\r\n                                className='cover'\r\n                                src={podcast.cover}\r\n                                alt='cover'\r\n                                onLoad={(e) => loadImage(e.target)}\r\n                              />\r\n                            ) : (\r\n                              ''\r\n                            )}\r\n                          </div>\r\n                          <h1 className='podcast-title'>{podcast.title}</h1>\r\n                        </div>\r\n                      )\r\n                  )}\r\n              </div>\r\n              <Paginate page={page} pages={pages} keyword={keyword} />\r\n            </div>\r\n            {/* <div className='best-list'>\r\n              <h3 className='heading'>Najlepiej oceniane</h3>\r\n            </div> */}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PodcastList;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\AdminPanel.tsx",["188","189"],"import { useEffect } from 'react';\r\nimport '../styles/admin-panel.scss';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { listUsers } from '../actions/userActions';\r\nimport Loader from '../components/Loader';\r\nimport {\r\n  createPodcast,\r\n  deletePodcast,\r\n  getPodcasts,\r\n} from '../actions/podcastActions';\r\nimport { Link } from 'react-router-dom';\r\nimport { deleteUser } from '../actions/userActions';\r\n\r\nconst AdminPanel: React.FC<{ history: any }> = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const userLogin = useSelector((state: RootStateOrAny) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const { podcasts, loading: podcastsLoading } = useSelector(\r\n    (state: RootStateOrAny) => state.podcastList\r\n  );\r\n\r\n  const { loading: usersLoading, users } = useSelector(\r\n    (state: RootStateOrAny) => state.userList\r\n  );\r\n\r\n  const { success: successUserDelete } = useSelector(\r\n    (state: RootStateOrAny) => state.userDelete\r\n  );\r\n\r\n  const { success: successPodcastDelete } = useSelector(\r\n    (state: RootStateOrAny) => state.podcastDelete\r\n  );\r\n\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    podcast: createdPodcast,\r\n  } = useSelector((state: RootStateOrAny) => state.podcastCreate);\r\n\r\n  let keyword = history.location.search;\r\n  useEffect(() => {\r\n    dispatch({ type: 'PODCAST_CREATE_RESET' });\r\n\r\n    if (successCreate) {\r\n      history.push(`/admin/podcastlist/${createdPodcast.id}/edit`);\r\n    } else {\r\n      dispatch(getPodcasts(keyword));\r\n    }\r\n\r\n    if (!userInfo || !userInfo.isAdmin) {\r\n      history.push('/login');\r\n    } else {\r\n      dispatch(listUsers());\r\n      dispatch(getPodcasts());\r\n    }\r\n\r\n    onLoadAnimations();\r\n    return () => {\r\n      onLeaveAnimations();\r\n    };\r\n  }, [\r\n    dispatch,\r\n    history,\r\n    keyword,\r\n    userInfo,\r\n    successPodcastDelete,\r\n    successUserDelete,\r\n    successCreate,\r\n    createdPodcast,\r\n  ]);\r\n\r\n  const onLoadAnimations = () => {\r\n    const navbar = document.querySelector('.navbar') as HTMLElement;\r\n    navbar.style.background = 'black';\r\n  };\r\n\r\n  const onLeaveAnimations = () => {\r\n    const navbar = document.querySelector('.navbar') as HTMLElement;\r\n    navbar.style.background = 'transparent';\r\n  };\r\n\r\n  const podcastDeleteHandler = (id: number) => {\r\n    if (window.confirm('Are you sure you want to delete this podcast?')) {\r\n      dispatch(deletePodcast(id));\r\n    }\r\n  };\r\n\r\n  const userDeleteHandler = (id: number) => {\r\n    if (window.confirm('Are you sure you want to delete this user?')) {\r\n      dispatch(deleteUser(id));\r\n    }\r\n  };\r\n\r\n  const createPodcastHandler = () => {\r\n    dispatch(createPodcast());\r\n  };\r\n\r\n  const showPanel = () => {\r\n    const panel = document.querySelector('.admin-panel') as HTMLElement;\r\n\r\n    panel &&\r\n      setTimeout(() => {\r\n        panel.classList.remove('admin-panel-hidden');\r\n      }, 15);\r\n  };\r\n\r\n  return (\r\n    <div className='admin-panel admin-panel-hidden'>\r\n      {podcastsLoading || usersLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          {showPanel()}\r\n          <h1>Panel Administratora</h1>\r\n          <div className='admin_users-list list-container'>\r\n            <div className='topbar'>\r\n              <h3>Użytkownicy</h3>\r\n            </div>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>USERNAME</th>\r\n                  <th>EMAIL</th>\r\n                  <th>ADMIN</th>\r\n                  <th>EDYCJA</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {users &&\r\n                  users.map((user: any) => (\r\n                    <tr key={user.id}>\r\n                      <td>{user.id}</td>\r\n                      <td>{user.username}</td>\r\n                      <td>{user.email}</td>\r\n                      <td>\r\n                        {user.isAdmin ? (\r\n                          <i\r\n                            className='fas fa-check'\r\n                            style={{ color: 'green' }}></i>\r\n                        ) : (\r\n                          <i\r\n                            className='fas fa-times'\r\n                            style={{ color: 'red' }}></i>\r\n                        )}\r\n                      </td>\r\n                      <td>\r\n                        <Link to={`/admin/userlist/${user.id}/edit`}>\r\n                          <button>\r\n                            <i className='fas fa-edit edit'></i>\r\n                          </button>\r\n                        </Link>\r\n                        <button onClick={() => userDeleteHandler(user.id)}>\r\n                          <i className='fas fa-trash delete'></i>\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className='admin_podcasts-list list-container'>\r\n            <div className='topbar'>\r\n              <h3>Podcasty</h3>\r\n              <button className='adding-button' onClick={createPodcastHandler}>\r\n                Dodaj nowy podcast +\r\n              </button>\r\n            </div>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>TYTUŁ</th>\r\n                  <th>KATEGORIA</th>\r\n                  <th>EDYCJA</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {podcasts &&\r\n                  podcasts.map((podcast: any) => (\r\n                    <tr key={podcast.id}>\r\n                      <td>{podcast.id}</td>\r\n                      <td>\r\n                        <Link to={`/podcast/${podcast.id}`}>\r\n                          {podcast.title}\r\n                        </Link>\r\n                      </td>\r\n                      <td>{podcast.category}</td>\r\n                      <td>\r\n                        <Link to={`/admin/podcastlist/${podcast.id}/edit`}>\r\n                          <button>\r\n                            <i className='fas fa-edit edit'></i>\r\n                          </button>\r\n                        </Link>\r\n                        <button\r\n                          onClick={() => {\r\n                            podcastDeleteHandler(podcast.id);\r\n                          }}>\r\n                          <i className='fas fa-trash delete'></i>\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPanel;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\UserEdit.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\PodcastEdit.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\podcast.tsx",["190"],"import React from 'react';\r\nimport { Route } from 'react-router';\r\nimport Comments from '../components/Comments';\r\nimport Player from './player';\r\n\r\nconst Podcast: React.FC<{ match: any }> = ({ match }) => {\r\n  return (\r\n    <div className='podcast'>\r\n      <Player podcastId={match.params.id} />\r\n      <Comments podcastId={match.params.id} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Podcast;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\reducers\\commentReducers.ts",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\actions\\commentActions.ts",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\pages\\Homepage.tsx",["191","192"],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/homepage.scss';\r\n\r\nimport background from '../assets/background-landing.jpg';\r\nimport backgroundWeather from '../assets/background-weather-preview.jpg';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { getPodcastDetails } from '../actions/podcastActions';\r\nimport Loader from '../components/Loader';\r\n\r\nimport { translateDescription } from '../functions/functions';\r\n\r\nimport axios from 'axios';\r\n\r\nconst Landing: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [temp, setTemp] = useState(0);\r\n  const [desc, setDesc] = useState('');\r\n  const [weatherLoading, setWeatherLoading] = useState(false);\r\n\r\n  const { podcast, loading } = useSelector(\r\n    (state: RootStateOrAny) => state.podcastDetails\r\n  );\r\n\r\n  const getWeather = async () => {\r\n    const APIKey = 'e7eec20a0655f51584d3e1a50afa74ca';\r\n    const API = `https://api.openweathermap.org/data/2.5/forecast?q=Warsaw&appid=${APIKey}&units=metric`;\r\n\r\n    setWeatherLoading(true);\r\n    try {\r\n      const { data } = await axios.get(API);\r\n      setTemp(data.list[0].main.temp);\r\n      setDesc(data.list[0].weather[0].main);\r\n\r\n      setWeatherLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setWeatherLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getPodcastDetails(0));\r\n    if (podcast.title) {\r\n      loadTextContent();\r\n    }\r\n    if (!temp || !desc) {\r\n      getWeather();\r\n    }\r\n\r\n    if (window.innerWidth < 1024) {\r\n      const sections = document.querySelectorAll('.landing .podcast-preview');\r\n      sections.forEach((section) => {\r\n        (section as HTMLElement).style.height = `${window.innerHeight}px`;\r\n      });\r\n    }\r\n  }, [dispatch, podcast]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch({ type: 'PODCAST_DETAILS_RESET' });\r\n    };\r\n  }, []);\r\n\r\n  const loadImage = (e: any) => {\r\n    setTimeout(() => {\r\n      (e.target as any).style.opacity = '1';\r\n    }, 100);\r\n  };\r\n\r\n  const loadTextContent = () => {\r\n    const texts = document.querySelectorAll('.text-content');\r\n    texts[0] &&\r\n      setTimeout(() => {\r\n        (texts[0] as any).classList.remove('hidden');\r\n      }, 15);\r\n\r\n    window.addEventListener('scroll', () => {\r\n      texts.forEach((text: any) => {\r\n        if (window.scrollY > text.offsetTop + text.offsetHeight) {\r\n          (text as any).classList.remove('hidden');\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='landing'>\r\n      <div className='podcast-preview section-preview'>\r\n        <img\r\n          className='background-image'\r\n          src={background}\r\n          alt='sky'\r\n          onLoad={loadImage}\r\n        />\r\n        {podcast && podcast.title ? (\r\n          <div className='text-content hidden'>\r\n            <h3>Najnowszy podcast</h3>\r\n            <h1 className='podcast-title'>{podcast && podcast.title}</h1>\r\n            <Link to={`/podcast`} className='basic-button' id='podcast-button'>\r\n              Przejdź do podcastu\r\n            </Link>\r\n          </div>\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n      <div className='podcast-preview section-preview'>\r\n        <img\r\n          className='background-image'\r\n          src={backgroundWeather}\r\n          alt='sky'\r\n          onLoad={loadImage}\r\n        />\r\n        {temp !== 0 ? (\r\n          <div className='text-content hidden'>\r\n            <h3>Pogoda w Warszawie</h3>\r\n            <h1 className='podcast-title'>\r\n              {Math.round(temp)}&#176; {translateDescription(desc)}\r\n            </h1>\r\n            <Link to={`/weather`} className='basic-button' id='podcast-button'>\r\n              Przejdź do prognozy\r\n            </Link>\r\n          </div>\r\n        ) : weatherLoading ? (\r\n          <Loader />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\functions\\functions.ts",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Confirm.tsx",[],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Reply.tsx",[],["193","194"],"C:\\Users\\dpiet\\Desktop\\Software Development\\REACT DJANGO PROJECTS\\NEW PROJECT\\app\\frontend\\src\\components\\Comment.tsx",["195","196"],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/comment.scss';\r\n\r\nimport { useHistory } from 'react-router';\r\nimport Loader from './Loader';\r\n\r\ninterface Props {\r\n  comment: any;\r\n  commentId?: number;\r\n  userInfo: any;\r\n  timeAgo: any;\r\n  submitEditComment: (commentId: number) => void;\r\n  startStopEditingComment: (commentId: number) => void;\r\n  commentDeleteHandler: (commentId: number) => void;\r\n  likeUnlike: (comment: any, commentId: number) => void;\r\n  editCommentText: (content: any, commentId: number, replyId?: number) => void;\r\n  showCommentForm: (commentId: number) => void;\r\n  createCommentHandler: (\r\n    e: React.FormEvent,\r\n    type: string,\r\n    commentId: number,\r\n    replyId: number,\r\n    author: string\r\n  ) => void;\r\n  hideForm: (commentId: number) => void;\r\n  isReply?: boolean;\r\n}\r\n\r\nconst Comment: React.FC<Props> = ({\r\n  comment,\r\n  commentId,\r\n  userInfo,\r\n  timeAgo,\r\n  submitEditComment,\r\n  startStopEditingComment,\r\n  commentDeleteHandler,\r\n  likeUnlike,\r\n  editCommentText,\r\n  showCommentForm,\r\n  createCommentHandler,\r\n  hideForm,\r\n  isReply,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div\r\n      id={`comment-${comment.id}`}\r\n      className={`comment ${\r\n        userInfo && comment.user === userInfo.id && 'my-comment'\r\n      } ${isReply && 'reply'}`}>\r\n      <div className='comment-data-container'>\r\n        <img\r\n          className='author-profile-photo'\r\n          src={comment.authorProfile.profile_pic}\r\n          alt='profile-pic'\r\n        />\r\n        <div className='wrapper'>\r\n          <div className='comment-info'>\r\n            <div className='basic'>\r\n              <span className='author'>{comment.author}</span>\r\n              <span className='date-added'>\r\n                <i className='far fa-calendar'></i>\r\n                {comment.date_added &&\r\n                  timeAgo.format(Date.parse(comment.date_added))}\r\n              </span>\r\n              {comment.was_edited && (\r\n                <span className='edited'>(edytowany)</span>\r\n              )}\r\n            </div>\r\n            <div className='comment-user-functions'>\r\n              {userInfo && comment.user === userInfo.id ? (\r\n                <>\r\n                  <div className='edit-buttons buttons-disabled'>\r\n                    <i\r\n                      className='fas fa-check-square accept'\r\n                      onClick={() => submitEditComment(comment.id)}></i>\r\n                    <i\r\n                      className='fas fa-minus-square cancel'\r\n                      onClick={() => startStopEditingComment(comment.id)}></i>\r\n                  </div>\r\n                  <div className='owner-buttons'>\r\n                    <i\r\n                      className='fas fa-pen edit'\r\n                      onClick={() => startStopEditingComment(comment.id)}></i>\r\n                    <i\r\n                      className='fas fa-trash delete'\r\n                      onClick={() => commentDeleteHandler(comment.id)}></i>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className='activities'>\r\n                  <i\r\n                    className={`fas fa-heart like-button ${\r\n                      userInfo &&\r\n                      comment.likes.find(\r\n                        (like: any) => like.user === userInfo.id\r\n                      ) &&\r\n                      'liked'\r\n                    } `}\r\n                    onClick={(e) => likeUnlike(e.target, comment.id)}></i>\r\n                  <span id={`likes-${comment.id}`} className='like-balance'>\r\n                    {comment.likes.length}\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <span\r\n            id={`comment-input-${comment.id}`}\r\n            className='content comment-content-text'\r\n            onChange={(e) => {\r\n              commentId\r\n                ? editCommentText(e.target, commentId, comment.id)\r\n                : editCommentText(e.target, comment.id);\r\n            }}>\r\n            {comment.higher_author && (\r\n              <span className='higher-author'>@{comment.higher_author}</span>\r\n            )}\r\n            <span className='comment-text'>{comment.text}</span>\r\n          </span>\r\n          <p\r\n            className='respond-button'\r\n            onClick={() => showCommentForm(comment.id)}>\r\n            Odpowiedz\r\n          </p>\r\n\r\n          <form\r\n            className='comment-form'\r\n            onSubmit={(e) => {\r\n              commentId\r\n                ? createCommentHandler(\r\n                    e,\r\n                    'comment',\r\n                    commentId,\r\n                    comment.id,\r\n                    comment.author\r\n                  )\r\n                : createCommentHandler(\r\n                    e,\r\n                    'comment',\r\n                    comment.id,\r\n                    0,\r\n                    comment.author\r\n                  );\r\n            }}>\r\n            <div className='form-group'>\r\n              <input\r\n                id={`textBox-${comment.id}`}\r\n                name='comment'\r\n                autoComplete='off'\r\n                placeholder='Napisz komentarz...'\r\n                onClick={() => (!userInfo ? history.push('/login') : '')}\r\n                required\r\n              />\r\n              <div className='line'></div>\r\n            </div>\r\n            <div className={`comment-buttons comment-active`}>\r\n              <button\r\n                className='cancel-button'\r\n                type='reset'\r\n                onClick={() => hideForm(comment.id)}>\r\n                Anuluj\r\n              </button>\r\n              <button\r\n                className='submit-button'\r\n                type='submit'\r\n                onClick={() => hideForm(comment.id)}>\r\n                Skomentuj\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <Loader />\r\n\r\n      {/* Odpowiedzi */}\r\n\r\n      {comment.replies &&\r\n        comment.replies\r\n          .sort((a: any, b: any) => {\r\n            return Date.parse(a.date_added) - Date.parse(b.date_added);\r\n          })\r\n          .map((reply: any) => (\r\n            <Comment\r\n              key={reply.id}\r\n              comment={reply}\r\n              commentId={comment.id}\r\n              userInfo={userInfo}\r\n              timeAgo={timeAgo}\r\n              submitEditComment={submitEditComment}\r\n              startStopEditingComment={startStopEditingComment}\r\n              commentDeleteHandler={commentDeleteHandler}\r\n              likeUnlike={likeUnlike}\r\n              editCommentText={editCommentText}\r\n              showCommentForm={showCommentForm}\r\n              createCommentHandler={createCommentHandler}\r\n              hideForm={hideForm}\r\n              isReply={true}\r\n            />\r\n          ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n",["197","198"],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":55,"column":11,"nodeType":"205","messageId":"206","endLine":55,"endColumn":14},{"ruleId":"199","replacedBy":"207"},{"ruleId":"201","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":36,"column":6,"nodeType":"211","endLine":36,"endColumn":35,"suggestions":"212"},{"ruleId":"203","severity":1,"message":"213","line":7,"column":8,"nodeType":"205","messageId":"206","endLine":7,"endColumn":15},{"ruleId":"203","severity":1,"message":"214","line":10,"column":8,"nodeType":"205","messageId":"206","endLine":10,"endColumn":14},{"ruleId":"203","severity":1,"message":"215","line":18,"column":10,"nodeType":"205","messageId":"206","endLine":18,"endColumn":17},{"ruleId":"203","severity":1,"message":"216","line":19,"column":10,"nodeType":"205","messageId":"206","endLine":19,"endColumn":20},{"ruleId":"203","severity":1,"message":"217","line":25,"column":11,"nodeType":"205","messageId":"206","endLine":25,"endColumn":16},{"ruleId":"203","severity":1,"message":"218","line":5,"column":16,"nodeType":"205","messageId":"206","endLine":5,"endColumn":26},{"ruleId":"209","severity":1,"message":"210","line":38,"column":6,"nodeType":"211","endLine":38,"endColumn":36,"suggestions":"219"},{"ruleId":"203","severity":1,"message":"220","line":17,"column":10,"nodeType":"205","messageId":"206","endLine":17,"endColumn":17},{"ruleId":"203","severity":1,"message":"221","line":17,"column":19,"nodeType":"205","messageId":"206","endLine":17,"endColumn":29},{"ruleId":"203","severity":1,"message":"222","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":14},{"ruleId":"209","severity":1,"message":"223","line":71,"column":6,"nodeType":"211","endLine":71,"endColumn":62,"suggestions":"224"},{"ruleId":"209","severity":1,"message":"225","line":77,"column":6,"nodeType":"211","endLine":77,"endColumn":8,"suggestions":"226"},{"ruleId":"203","severity":1,"message":"227","line":1,"column":28,"nodeType":"205","messageId":"206","endLine":1,"endColumn":36},{"ruleId":"203","severity":1,"message":"218","line":3,"column":16,"nodeType":"205","messageId":"206","endLine":3,"endColumn":26},{"ruleId":"203","severity":1,"message":"228","line":38,"column":14,"nodeType":"205","messageId":"206","endLine":38,"endColumn":27},{"ruleId":"203","severity":1,"message":"229","line":39,"column":12,"nodeType":"205","messageId":"206","endLine":39,"endColumn":23},{"ruleId":"203","severity":1,"message":"230","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":15},{"ruleId":"209","severity":1,"message":"231","line":58,"column":6,"nodeType":"211","endLine":58,"endColumn":25,"suggestions":"232"},{"ruleId":"209","severity":1,"message":"225","line":64,"column":6,"nodeType":"211","endLine":64,"endColumn":8,"suggestions":"233"},{"ruleId":"199","replacedBy":"234"},{"ruleId":"201","replacedBy":"235"},{"ruleId":"203","severity":1,"message":"236","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"227","line":1,"column":28,"nodeType":"205","messageId":"206","endLine":1,"endColumn":36},{"ruleId":"199","replacedBy":"237"},{"ruleId":"201","replacedBy":"238"},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"@typescript-eslint/no-unused-vars","'app' is assigned a value but never used.","Identifier","unusedVar",["239"],["240"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["241"],"'Message' is defined but never used.","'Footer' is defined but never used.","'message' is assigned a value but never used.","'profilePic' is assigned a value but never used.","'error' is assigned a value but never used.","'useHistory' is defined but never used.",["242"],"'confirm' is assigned a value but never used.","'setConfirm' is assigned a value but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'checkIfMobile', 'countComments', and 'getPodcastPreview'. Either include them or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["244"],"'useState' is defined but never used.","'loadingCreate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","'Route' is defined but never used.","React Hook useEffect has missing dependencies: 'desc' and 'temp'. Either include them or remove the dependency array.",["245"],["246"],["239"],["240"],"'useEffect' is defined but never used.",["239"],["240"],"no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"253","fix":"257"},"Update the dependencies array to be: [loading, userInfo, redirect, history]",{"range":"258","text":"259"},"Update the dependencies array to be: [userInfo, redirect, location, history]",{"range":"260","text":"261"},"Update the dependencies array to be: [dispatch, podcast, userInfo, podcastId, podcastPreview, checkIfMobile, getPodcastPreview, countComments]",{"range":"262","text":"263"},"Update the dependencies array to be: [dispatch]",{"range":"264","text":"265"},"Update the dependencies array to be: [desc, dispatch, podcast, temp]",{"range":"266","text":"267"},{"range":"268","text":"265"},[1113,1142],"[loading, userInfo, redirect, history]",[1110,1140],"[userInfo, redirect, location, history]",[2335,2391],"[dispatch, podcast, userInfo, podcastId, podcastPreview, checkIfMobile, getPodcastPreview, countComments]",[2503,2505],"[dispatch]",[1807,1826],"[desc, dispatch, podcast, temp]",[1938,1940]]